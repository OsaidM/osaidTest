name: Pytester-cov

on:
  push:
    branches:
      - master

jobs:
  test:
    name: Test Django Application
    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 60
      COVERAGE_TOTAL: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 coverage # Explicitly add coverage here or ensure pytest-cov is in requirements.txt
          pip install -r requirements.txt
        # Removed DJANGO_SETTINGS=TESTING env here, as it's usually better handled by pytest-django or specific test settings

      - name: Set up Django environment (if needed before tests)
        # This might only be necessary if your tests rely on migrations existing *before* pytest runs.
        # Often pytest-django handles this within the test session. Adjust if needed.
        run: |
          python manage.py makemigrations
          python manage.py migrate
        env:
          DJANGO_SETTINGS: TESTING

      - name: Run tests and check coverage thresholds
        id: pytester-cov
        uses: programmingwithalex/pytester-cov@v1.2.4
        with:
          pytest-root-dir: '.'
          # Cleaned up omit list slightly - removed trailing /*, added manage.py and migrations
          cov-omit-list: '*/admin.py,*/__init__.py,*/apps.py,*/settings.py,*/asgi.py,*/wsgi.py,*/urls.py,manage.py,*/migrations/*'
          cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
          cov-threshold-total: ${{ env.COVERAGE_TOTAL }}
          # Optional: Add pytest arguments if needed, e.g., specifying test settings
          # pytest-args: '--ds=yourproject.settings.test'

      - name: Generate Detailed Coverage Report Text
        # Run this even if previous steps failed (e.g., threshold check), so the report is available for the issue
        if: always()
        id: detailed_report
        run: |
          echo "Generating detailed text report..."
          # The .coverage file was generated by the pytester-cov step (which ran pytest --cov)
          # We use the 'coverage' command now to report on that file.
          # The 'omit' logic was handled during test run, so report should reflect it.
          # Use 'coverage report -m' to show details including missing lines.
          # Capture multiline output correctly for GitHub Actions env var/output
          {
            echo 'report<<EOF'
            coverage report -m --fail-under=0 || echo "Coverage report command finished (ignore exit code here)" # Use fail-under=0 to prevent this step failing; threshold check is done by pytester-cov
            echo EOF
          } >> $GITHUB_OUTPUT


      - name: Coverage single fail - new issue
        # Condition uses the output from the dedicated checker step
        if: steps.pytester-cov.outputs.cov-threshold-single-fail == 'true'
        uses: nashmaniac/create-issue-action@v1.2
        with:
          title: Pytest coverage SINGLE file below ${{env.COVERAGE_SINGLE}}%
          token: ${{ secrets.GITHUB_TOKEN }}
          assignees: ${{ github.actor }}
          labels: workflow-failed
          body: |
            ## Coverage Failed: Single File Threshold

            Minimum required coverage per file: `${{ env.COVERAGE_SINGLE }}%`

            One or more files fell below the required threshold.

            **Summary:**
            ```
            ${{ steps.pytester-cov.outputs.output-table }}
            ```

            **Detailed Report (includes files below threshold):**
            ```text
            ${{ steps.detailed_report.outputs.report }}
            ```
            *Note: The detailed report shows all measured files. Check files with coverage < ${{ env.COVERAGE_SINGLE }}%.*

      - name: Coverage single fail - exit
        if: steps.pytester-cov.outputs.cov-threshold-single-fail == 'true'
        run: |
          echo "Coverage single file threshold failed."
          exit 1

      - name: Coverage total fail - new issue
        # Check total fail AND that single didn't already fail (to avoid duplicate issues if both fail)
        if: steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' && steps.pytester-cov.outputs.cov-threshold-single-fail != 'true'
        uses: nashmaniac/create-issue-action@v1.2
        with:
          title: Pytest coverage TOTAL below ${{env.COVERAGE_TOTAL}}%
          token: ${{ secrets.GITHUB_TOKEN }}
          assignees: ${{ github.actor }}
          labels: workflow-failed
          body: |
            ## Coverage Failed: Total Threshold

            Minimum required total coverage: `${{ env.COVERAGE_TOTAL }}%`

            The overall test coverage fell below the required threshold.

            **Summary:**
            ```
            ${{ steps.pytester-cov.outputs.output-table }}
            ```

            **Detailed Report:**
            ```text
            ${{ steps.detailed_report.outputs.report }}
            ```

      - name: Coverage total fail - exit
        if: steps.pytester-cov.outputs.cov-threshold-total-fail == 'true'
        run: |
          echo "Coverage total threshold failed."
          exit 1 # This will cause the job to fail overall

      - name: Commit pytest coverage report (on success)
        # Only comment if the workflow succeeded overall (implies thresholds passed)
        if: success()
        uses: peter-evans/commit-comment@v3 # Use latest version
        with:
          body: |
            ## Pytest Coverage Report (Passed)

            Coverage thresholds passed: Total >= ${{ env.COVERAGE_TOTAL }}%, Single >= ${{ env.COVERAGE_SINGLE }}%

            **Summary:**
            ```
            ${{ steps.pytester-cov.outputs.output-table }}
            ```

            **Detailed Report:**
            ```text
            ${{ steps.detailed_report.outputs.report }}
            ```